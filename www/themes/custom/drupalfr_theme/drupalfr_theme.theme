<?php

/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */

use Drupal\Component\Render\FormattableMarkup;

/**
 * Implements hook_preprocess_paragraph().
 */
function drupalfr_theme_preprocess_paragraph(&$variables) {
  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  $paragraph = $variables['paragraph'];
  if ($paragraph->bundle() == 'title_text_media') {
    $variables['media_position'] = 'right';
    $variables['media_width_class'] = 'col-md-6';
    $variables['text_width_class'] = 'col-md-6';

    // Paragraph CSS Class.
    if ($paragraph->hasField('field_css_class')) {
      $css_class = $paragraph->get('field_css_class')->getValue();
      if (!empty($css_class)) {
        $variables['attributes']['class'][] = $css_class[0]['value'];
      }
    }

    // Media position.
    if ($paragraph->hasField('field_media_position')) {
      $media_position = $paragraph->get('field_media_position')->getValue();
      if (!empty($media_position)) {
        $variables['media_position'] = $media_position[0]['value'] ? 'left' : 'right';
      }
    }

    // Media width.
    if ($paragraph->hasField('field_media_width_class')) {
      $media_width_class = $paragraph->get('field_media_width_class')->getValue();
      if (!empty($media_width_class)) {
        $media_width_class = $media_width_class[0]['value'];
        // Edge cases.
        if ($media_width_class == 0) {
          unset($variables['content']['field_media']);
        }
        elseif ($media_width_class == 12) {
          unset($variables['content']['field_title']);
          unset($variables['content']['field_sub_title']);
          unset($variables['content']['field_text']);
          unset($variables['content']['field_call_to_action']);
        }
        $text_width_class = 12 - (int) $media_width_class;
        $variables['media_width_class'] = 'col-md-' . $media_width_class;
        $variables['text_width_class'] = 'col-md-' . $text_width_class;
      }
    }

    // Title level.
    if (
      $paragraph->hasField('field_title_level') &&
      $paragraph->hasField('field_title') &&
      isset($variables['content']['field_title'])
    ) {
      $title_level = $paragraph->get('field_title_level')->getValue();
      if (!empty($title_level)) {
        $title_level = $title_level[0]['value'];
        $variables['content']['field_title']['#prefix'] = "<$title_level>";
        $variables['content']['field_title']['#suffix'] = "</$title_level>";
      }
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function drupalfr_theme_preprocess_node(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];

  // Add the formatted date to all nodes.
  /** @var Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
  $date_formatter = \Drupal::service('date.formatter');
  $creation_time = $node->getCreatedTime();
  $formatted_date = $date_formatter->format($creation_time, 'custom', '<\s\p\a\n \c\l\a\s\s="\d\a\t\e">d<\b\r>M</\s\p\a\n><\s\p\a\n \c\l\a\s\s="\t\i\m\e">H\hi</\s\p\a\n>');
  $variables['square_publication_date'] = new FormattableMarkup($formatted_date, []);
}

/**
 * Implements hook_theme_suggestions_user_alter().
 */
function drupalfr_theme_theme_suggestions_user_alter(&$suggestions, $variables) {
  $suggestions[] = 'user__' . $variables['elements']['#view_mode'];
}
