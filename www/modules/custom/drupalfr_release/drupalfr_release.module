<?php

/**
 * @file
 * Contains hook implementations for drupalfr_release module.
 */

use Drupal\advancedqueue\Job;

/**
 * Implements hook_cron().
 */
function drupalfr_release_cron() {
  $current_time = \Drupal::time()->getRequestTime();
  $state = \Drupal::state();

  $last_uuid_check = $state->get('drupalfr_release.last_uuid_check', 0);

  // Check the releases every day (3600x24).
  if (($last_uuid_check + 86400) < $current_time) {
    $advanced_queue_storage = \Drupal::entityTypeManager()->getStorage('advancedqueue_queue');
    /** @var \Drupal\advancedqueue\Entity\QueueInterface $advanced_queue */
    $advanced_queue = $advanced_queue_storage->load('drupalfr_release_import');

    /** @var \Drupal\drupalfr_release\Service\ReleaseHelperInterface $release_helper */
    $release_helper = \Drupal::service('drupalfr_release.release_helper');
    $data = $release_helper->getFeedReleases();

    // Add items to the queue only if it has been created after the last import.
    foreach ($data as $result) {
      if ($last_uuid_check < $result['date']) {
        $release_import_job = Job::create('drupalfr_release_import', [
          'data' => $result,
        ]);
        $advanced_queue->enqueueJob($release_import_job);
      }
    }
    $state->set('drupalfr_release.last_uuid_check', $current_time);
  }
}

/**
 * Implements hook_preprocess_node().
 */
function drupalfr_release_preprocess_node(&$variables) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $variables['node'];

  // Add variable for the creation date.
  if ($node->bundle() == 'release') {
    /** @var Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
    $date_formatter = \Drupal::service('date.formatter');

    $variables['release_creation_date'] = t('Created the @date', [
      '@date' => $date_formatter->format($node->getCreatedTime(), 'jour_mois_annee_heure'),
    ]);
  }

}
