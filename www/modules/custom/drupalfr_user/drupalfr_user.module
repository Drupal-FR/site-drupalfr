<?php

/**
 * @file
 * Contains hook implementations for drupalfr_user module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function drupalfr_user_theme($existing, $type, $theme, $path) {
  return [
    'drupalfr_user_member_badge' => [
      'variables' => [
        'is_member' => TRUE,
        'is_profile_owner' => TRUE,
      ],
    ],
  ];
}

/**
 * Implements hook_menu_links_discovered_alter().
 *
 * Disable default links provided by the user module.
 */
function drupalfr_user_menu_links_discovered_alter(&$links) {
  $user_links = [
    'user.logout',
    'user.page',
  ];

  foreach ($user_links as $user_link) {
    if (isset($links[$user_link])) {
      $links[$user_link]['enabled'] = FALSE;
    }
  }
}

/**
 * Implements hook_preprocess_user().
 */
function drupalfr_user_preprocess_user(&$variables) {
  // Add member badge to display on user profile.
  if ($variables['elements']['#view_mode'] == 'full') {
    /** @var \Drupal\user\UserInterface $user */
    $user = $variables['user'];

    $variables['member_badge'] = [
      '#lazy_builder' => ['drupalfr_user.member_badge_builder:build',
        [
          $user->id(),
        ],
      ],
      '#create_placeholder' => TRUE,
    ];
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Set membership number if the user has not one yet.
 *
 * Use this hook (no event available) to avoid having to reproduce activation
 * logic of Commerce license.
 */
function drupalfr_user_user_presave(EntityInterface $entity) {
  /** @var \Drupal\user\UserInterface $entity */
  // User has to have an account before taking a membership.
  if (!$entity->isNew()) {
    if ($entity->hasField('field_user_membership_number') && $entity->get('field_user_membership_number')->isEmpty()) {
      if ($entity->hasRole('member')) {
        $next_membership_number = \Drupal::state()->get('drupalfr_user.next_membership_number', 1);
        $entity->set('field_user_membership_number', $next_membership_number);

        \Drupal::state()->set('drupalfr_user.next_membership_number', $next_membership_number + 1);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Prevent unauthorized users to edit their membership number.
 */
function drupalfr_user_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['field_user_membership_number'])) {
    $form['field_user_membership_number']['widget']['#disabled'] = !\Drupal::currentUser()->hasPermission('drupalfr_user_edit_user_membership_number');
  }
}
