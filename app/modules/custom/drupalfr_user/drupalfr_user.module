<?php

/**
 * @file
 * Contains hook implementations for drupalfr_user module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\user\UserInterface;

/**
 * Implements hook_theme().
 */
function drupalfr_user_theme($existing, $type, $theme, $path) {

  return [
    'drupalfr_user_member_badge' => [
      'variables' => [
        'is_member' => TRUE,
        'is_organization' => FALSE,
        'is_profile_owner' => TRUE,
      ],
    ],
  ];
}

/**
 * Implements hook_menu_links_discovered_alter().
 *
 * Disable default links provided by the user module.
 */
function drupalfr_user_menu_links_discovered_alter(&$links) {
  $user_links = [
    'user.logout',
    'user.page',
  ];

  foreach ($user_links as $user_link) {
    if (isset($links[$user_link])) {
      $links[$user_link]['enabled'] = FALSE;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 *
 * Set membership number if the user has not one yet.
 *
 * Use this hook (no event available) to avoid having to reproduce activation
 * logic of Commerce license.
 */
function drupalfr_user_user_presave(EntityInterface $entity) {
  /** @var \Drupal\user\UserInterface $entity */
  // User has to have an account before taking a membership.
  if (!$entity->isNew()) {
    if ($entity->hasField('field_user_membership_number') && $entity->get('field_user_membership_number')->isEmpty()) {
      if ($entity->hasRole('member')) {
        $next_membership_number = \Drupal::state()->get('drupalfr_user.next_membership_number', 1);
        $entity->set('field_user_membership_number', $next_membership_number);

        \Drupal::state()->set('drupalfr_user.next_membership_number', $next_membership_number + 1);
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Prevent unauthorized users to edit their membership number.
 */
function drupalfr_user_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['field_user_membership_number'])) {
    $form['field_user_membership_number']['widget']['#disabled'] = !\Drupal::currentUser()->hasPermission('drupalfr_user_edit_user_membership_number');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add links to password reset and create account form.
 */
function drupalfr_user_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $url = Url::fromRoute('user.register');
  $form['create_account_link'] = [
    '#type' => 'link',
    '#title' => t('Create new account'),
    '#url' => $url,
    '#access' => $url->renderAccess($url->toRenderArray()),
    '#weight' => 10,
  ];

  $url = Url::fromRoute('user.pass');
  $form['password_reset_link'] = [
    '#type' => 'link',
    '#title' => t('Reset your password'),
    '#url' => $url,
    '#access' => $url->renderAccess($url->toRenderArray()),
    '#weight' => 11,
  ];
  $form['actions']['#weight'] = 9;

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add links to password reset and login.
 */
function drupalfr_user_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $url = Url::fromRoute('user.login');
  $form['login_link'] = [
    '#type' => 'link',
    '#title' => t('Log In'),
    '#url' => $url,
    '#access' => $url->renderAccess($url->toRenderArray()),
    '#weight' => 10,
  ];

  $url = Url::fromRoute('user.pass');
  $form['password_reset_link'] = [
    '#type' => 'link',
    '#title' => t('Reset your password'),
    '#url' => $url,
    '#access' => $url->renderAccess($url->toRenderArray()),
    '#weight' => 11,
  ];
  $form['actions']['#weight'] = 9;

}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Add links to password reset and login.
 */
function drupalfr_user_form_user_pass_alter(&$form, FormStateInterface $form_state, $form_id) {
  $url = Url::fromRoute('user.login');
  $form['login_link'] = [
    '#type' => 'link',
    '#title' => t('Log In'),
    '#url' => $url,
    '#access' => $url->renderAccess($url->toRenderArray()),
    '#weight' => 10,
  ];

  $url = Url::fromRoute('user.register');
  $form['create_account_link'] = [
    '#type' => 'link',
    '#title' => t('Create new account'),
    '#url' => $url,
    '#access' => $url->renderAccess($url->toRenderArray()),
    '#weight' => 10,
  ];
  $form['actions']['#weight'] = 9;

}

/**
 * Implements hook_ENTITY_TYPE_view_alter() for user entities.
 */
function drupalfr_user_user_view_alter(array &$build, UserInterface $account, EntityViewDisplayInterface $display) {
  if ($display->getComponent('member_for')) {
    $build['member_for'] = [
      '#type' => 'item',
      '#markup' => '<span>' . t('Member for') . '</span> ' . \Drupal::service('date.formatter')->formatTimeDiffSince($account->getCreatedTime()),
      '#weight' => 10,
    ];
  }
}
